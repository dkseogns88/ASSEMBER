// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_PLAYER = 1,
  OBJECT_TYPE_MONSTER = 2,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = OBJECT_TYPE_NONE;
constexpr ObjectType ObjectType_MAX = OBJECT_TYPE_MONSTER;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum PlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerType_IsValid(int value);
constexpr PlayerType PlayerType_MIN = PLAYER_TYPE_NONE;
constexpr PlayerType PlayerType_MAX = PLAYER_TYPE_NONE;
constexpr int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor();
template<typename T>
inline const std::string& PlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerType_descriptor(), enum_t_value);
}
inline bool PlayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
enum MonsterType : int {
  MONSTER_TYPE_NONE = 0,
  MonsterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterType_IsValid(int value);
constexpr MonsterType MonsterType_MIN = MONSTER_TYPE_NONE;
constexpr MonsterType MonsterType_MAX = MONSTER_TYPE_NONE;
constexpr int MonsterType_ARRAYSIZE = MonsterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor();
template<typename T>
inline const std::string& MonsterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterType_descriptor(), enum_t_value);
}
inline bool MonsterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterType>(
    MonsterType_descriptor(), name, value);
}
enum AttackType : int {
  ATTACK_TYPE_NONE = 0,
  ATTACK_TYPE_BASIC = 1,
  ATTACK_TYPE_SKILL = 2,
  AttackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AttackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AttackType_IsValid(int value);
constexpr AttackType AttackType_MIN = ATTACK_TYPE_NONE;
constexpr AttackType AttackType_MAX = ATTACK_TYPE_SKILL;
constexpr int AttackType_ARRAYSIZE = AttackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackType_descriptor();
template<typename T>
inline const std::string& AttackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttackType_descriptor(), enum_t_value);
}
inline bool AttackType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttackType>(
    AttackType_descriptor(), name, value);
}
enum SkillType : int {
  SKILL_TYPE_NONE = 0,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillType_IsValid(int value);
constexpr SkillType SkillType_MIN = SKILL_TYPE_NONE;
constexpr SkillType SkillType_MAX = SKILL_TYPE_NONE;
constexpr int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor();
template<typename T>
inline const std::string& SkillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillType_descriptor(), enum_t_value);
}
inline bool SkillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_WALK = 2,
  MOVE_STATE_RUN = 3,
  MOVE_STATE_JUMP = 4,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveState_IsValid(int value);
constexpr MoveState MoveState_MIN = MOVE_STATE_NONE;
constexpr MoveState MoveState_MAX = MOVE_STATE_JUMP;
constexpr int MoveState_ARRAYSIZE = MoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor();
template<typename T>
inline const std::string& MoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveState_descriptor(), enum_t_value);
}
inline bool MoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveState>(
    MoveState_descriptor(), name, value);
}
enum LocomotionState : int {
  LOCOMOTION_STATE_NONE = 0,
  LOCOMOTION_STATE_IDLE = 1,
  LOCOMOTION_STATE_CROUCH = 2,
  LocomotionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocomotionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocomotionState_IsValid(int value);
constexpr LocomotionState LocomotionState_MIN = LOCOMOTION_STATE_NONE;
constexpr LocomotionState LocomotionState_MAX = LOCOMOTION_STATE_CROUCH;
constexpr int LocomotionState_ARRAYSIZE = LocomotionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocomotionState_descriptor();
template<typename T>
inline const std::string& LocomotionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocomotionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocomotionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocomotionState_descriptor(), enum_t_value);
}
inline bool LocomotionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocomotionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocomotionState>(
    LocomotionState_descriptor(), name, value);
}
enum OverlayState : int {
  OVERLAY_STATE_NONE = 0,
  OVERLAY_STATE_PISTOL = 1,
  OVERLAY_STATE_RIFLE = 2,
  OverlayState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OverlayState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OverlayState_IsValid(int value);
constexpr OverlayState OverlayState_MIN = OVERLAY_STATE_NONE;
constexpr OverlayState OverlayState_MAX = OVERLAY_STATE_RIFLE;
constexpr int OverlayState_ARRAYSIZE = OverlayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayState_descriptor();
template<typename T>
inline const std::string& OverlayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OverlayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OverlayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OverlayState_descriptor(), enum_t_value);
}
inline bool OverlayState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OverlayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OverlayState>(
    OverlayState_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerType>() {
  return ::Protocol::PlayerType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MonsterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MonsterType>() {
  return ::Protocol::MonsterType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::AttackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::AttackType>() {
  return ::Protocol::AttackType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillType>() {
  return ::Protocol::SkillType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LocomotionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LocomotionState>() {
  return ::Protocol::LocomotionState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::OverlayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::OverlayState>() {
  return ::Protocol::OverlayState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
