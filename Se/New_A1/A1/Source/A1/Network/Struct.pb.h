// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class AttackInfo;
struct AttackInfoDefaultTypeInternal;
extern AttackInfoDefaultTypeInternal _AttackInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class StatInfo;
struct StatInfoDefaultTypeInternal;
extern StatInfoDefaultTypeInternal _StatInfo_default_instance_;
class StateInfo;
struct StateInfoDefaultTypeInternal;
extern StateInfoDefaultTypeInternal _StateInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::AttackInfo* Arena::CreateMaybeMessage<::Protocol::AttackInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PosInfo* Arena::CreateMaybeMessage<::Protocol::PosInfo>(Arena*);
template<> ::Protocol::StatInfo* Arena::CreateMaybeMessage<::Protocol::StatInfo>(Arena*);
template<> ::Protocol::StateInfo* Arena::CreateMaybeMessage<::Protocol::StateInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PosInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  ~PosInfo() override;
  explicit PROTOBUF_CONSTEXPR PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PosInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PosInfo& from) {
    PosInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kMoveStateFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kYawFieldNumber = 6,
    kDXFieldNumber = 7,
    kDYFieldNumber = 8,
    kDZFieldNumber = 9,
    kAimPitchFieldNumber = 10,
    kAimYawFieldNumber = 11,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.MoveState move_state = 2;
  void clear_move_state();
  ::Protocol::MoveState move_state() const;
  void set_move_state(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_move_state() const;
  void _internal_set_move_state(::Protocol::MoveState value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 5;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 6;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float d_x = 7;
  void clear_d_x();
  float d_x() const;
  void set_d_x(float value);
  private:
  float _internal_d_x() const;
  void _internal_set_d_x(float value);
  public:

  // float d_y = 8;
  void clear_d_y();
  float d_y() const;
  void set_d_y(float value);
  private:
  float _internal_d_y() const;
  void _internal_set_d_y(float value);
  public:

  // float d_z = 9;
  void clear_d_z();
  float d_z() const;
  void set_d_z(float value);
  private:
  float _internal_d_z() const;
  void _internal_set_d_z(float value);
  public:

  // float aim_pitch = 10;
  void clear_aim_pitch();
  float aim_pitch() const;
  void set_aim_pitch(float value);
  private:
  float _internal_aim_pitch() const;
  void _internal_set_aim_pitch(float value);
  public:

  // float aim_yaw = 11;
  void clear_aim_yaw();
  float aim_yaw() const;
  void set_aim_yaw(float value);
  private:
  float _internal_aim_yaw() const;
  void _internal_set_aim_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int move_state_;
    float x_;
    float y_;
    float z_;
    float yaw_;
    float d_x_;
    float d_y_;
    float d_z_;
    float aim_pitch_;
    float aim_yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StatInfo) */ {
 public:
  inline StatInfo() : StatInfo(nullptr) {}
  ~StatInfo() override;
  explicit PROTOBUF_CONSTEXPR StatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatInfo(const StatInfo& from);
  StatInfo(StatInfo&& from) noexcept
    : StatInfo() {
    *this = ::std::move(from);
  }

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatInfo& operator=(StatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatInfo* internal_default_instance() {
    return reinterpret_cast<const StatInfo*>(
               &_StatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatInfo& a, StatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatInfo& from) {
    StatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StatInfo";
  }
  protected:
  explicit StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kDamageFieldNumber = 4,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 max_hp = 3;
  void clear_max_hp();
  uint32_t max_hp() const;
  void set_max_hp(uint32_t value);
  private:
  uint32_t _internal_max_hp() const;
  void _internal_set_max_hp(uint32_t value);
  public:

  // uint32 damage = 4;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    uint32_t hp_;
    uint32_t max_hp_;
    uint32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StateInfo) */ {
 public:
  inline StateInfo() : StateInfo(nullptr) {}
  ~StateInfo() override;
  explicit PROTOBUF_CONSTEXPR StateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateInfo(const StateInfo& from);
  StateInfo(StateInfo&& from) noexcept
    : StateInfo() {
    *this = ::std::move(from);
  }

  inline StateInfo& operator=(const StateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateInfo& operator=(StateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateInfo* internal_default_instance() {
    return reinterpret_cast<const StateInfo*>(
               &_StateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateInfo& a, StateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateInfo& from) {
    StateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StateInfo";
  }
  protected:
  explicit StateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kLocomotionStateFieldNumber = 2,
    kOverlayStateFieldNumber = 3,
    kAimFieldNumber = 4,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.LocomotionState locomotion_state = 2;
  void clear_locomotion_state();
  ::Protocol::LocomotionState locomotion_state() const;
  void set_locomotion_state(::Protocol::LocomotionState value);
  private:
  ::Protocol::LocomotionState _internal_locomotion_state() const;
  void _internal_set_locomotion_state(::Protocol::LocomotionState value);
  public:

  // .Protocol.OverlayState overlay_state = 3;
  void clear_overlay_state();
  ::Protocol::OverlayState overlay_state() const;
  void set_overlay_state(::Protocol::OverlayState value);
  private:
  ::Protocol::OverlayState _internal_overlay_state() const;
  void _internal_set_overlay_state(::Protocol::OverlayState value);
  public:

  // bool aim = 4;
  void clear_aim();
  bool aim() const;
  void set_aim(bool value);
  private:
  bool _internal_aim() const;
  void _internal_set_aim(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int locomotion_state_;
    int overlay_state_;
    bool aim_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 5,
    kStatInfoFieldNumber = 6,
    kStateInfoFieldNumber = 7,
    kObjectIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
    kPlayerTypeFieldNumber = 3,
    kMonsterTypeFieldNumber = 4,
  };
  // .Protocol.PosInfo pos_Info = 5;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // .Protocol.StatInfo stat_Info = 6;
  bool has_stat_info() const;
  private:
  bool _internal_has_stat_info() const;
  public:
  void clear_stat_info();
  const ::Protocol::StatInfo& stat_info() const;
  PROTOBUF_NODISCARD ::Protocol::StatInfo* release_stat_info();
  ::Protocol::StatInfo* mutable_stat_info();
  void set_allocated_stat_info(::Protocol::StatInfo* stat_info);
  private:
  const ::Protocol::StatInfo& _internal_stat_info() const;
  ::Protocol::StatInfo* _internal_mutable_stat_info();
  public:
  void unsafe_arena_set_allocated_stat_info(
      ::Protocol::StatInfo* stat_info);
  ::Protocol::StatInfo* unsafe_arena_release_stat_info();

  // .Protocol.StateInfo state_Info = 7;
  bool has_state_info() const;
  private:
  bool _internal_has_state_info() const;
  public:
  void clear_state_info();
  const ::Protocol::StateInfo& state_info() const;
  PROTOBUF_NODISCARD ::Protocol::StateInfo* release_state_info();
  ::Protocol::StateInfo* mutable_state_info();
  void set_allocated_state_info(::Protocol::StateInfo* state_info);
  private:
  const ::Protocol::StateInfo& _internal_state_info() const;
  ::Protocol::StateInfo* _internal_mutable_state_info();
  public:
  void unsafe_arena_set_allocated_state_info(
      ::Protocol::StateInfo* state_info);
  ::Protocol::StateInfo* unsafe_arena_release_state_info();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.ObjectType object_type = 2;
  void clear_object_type();
  ::Protocol::ObjectType object_type() const;
  void set_object_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::Protocol::ObjectType value);
  public:

  // .Protocol.PlayerType player_type = 3;
  void clear_player_type();
  ::Protocol::PlayerType player_type() const;
  void set_player_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_player_type() const;
  void _internal_set_player_type(::Protocol::PlayerType value);
  public:

  // .Protocol.MonsterType monster_type = 4;
  void clear_monster_type();
  ::Protocol::MonsterType monster_type() const;
  void set_monster_type(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_monster_type() const;
  void _internal_set_monster_type(::Protocol::MonsterType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    ::Protocol::StatInfo* stat_info_;
    ::Protocol::StateInfo* state_info_;
    uint64_t object_id_;
    int object_type_;
    int player_type_;
    int monster_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class AttackInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.AttackInfo) */ {
 public:
  inline AttackInfo() : AttackInfo(nullptr) {}
  ~AttackInfo() override;
  explicit PROTOBUF_CONSTEXPR AttackInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttackInfo(const AttackInfo& from);
  AttackInfo(AttackInfo&& from) noexcept
    : AttackInfo() {
    *this = ::std::move(from);
  }

  inline AttackInfo& operator=(const AttackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttackInfo& operator=(AttackInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttackInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttackInfo* internal_default_instance() {
    return reinterpret_cast<const AttackInfo*>(
               &_AttackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AttackInfo& a, AttackInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AttackInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttackInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttackInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttackInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttackInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttackInfo& from) {
    AttackInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.AttackInfo";
  }
  protected:
  explicit AttackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackObjectIdFieldNumber = 1,
    kHitObjectIdFieldNumber = 2,
    kAttackTypeFieldNumber = 3,
    kSkillTypeFieldNumber = 4,
    kImpactLocationXFieldNumber = 5,
    kImpactLocationYFieldNumber = 6,
    kImpactLocationZFieldNumber = 7,
  };
  // uint64 attack_object_id = 1;
  void clear_attack_object_id();
  uint64_t attack_object_id() const;
  void set_attack_object_id(uint64_t value);
  private:
  uint64_t _internal_attack_object_id() const;
  void _internal_set_attack_object_id(uint64_t value);
  public:

  // uint64 hit_object_id = 2;
  void clear_hit_object_id();
  uint64_t hit_object_id() const;
  void set_hit_object_id(uint64_t value);
  private:
  uint64_t _internal_hit_object_id() const;
  void _internal_set_hit_object_id(uint64_t value);
  public:

  // .Protocol.AttackType attack_type = 3;
  void clear_attack_type();
  ::Protocol::AttackType attack_type() const;
  void set_attack_type(::Protocol::AttackType value);
  private:
  ::Protocol::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::Protocol::AttackType value);
  public:

  // .Protocol.SkillType skill_type = 4;
  void clear_skill_type();
  ::Protocol::SkillType skill_type() const;
  void set_skill_type(::Protocol::SkillType value);
  private:
  ::Protocol::SkillType _internal_skill_type() const;
  void _internal_set_skill_type(::Protocol::SkillType value);
  public:

  // float impact_location_x = 5;
  void clear_impact_location_x();
  float impact_location_x() const;
  void set_impact_location_x(float value);
  private:
  float _internal_impact_location_x() const;
  void _internal_set_impact_location_x(float value);
  public:

  // float impact_location_y = 6;
  void clear_impact_location_y();
  float impact_location_y() const;
  void set_impact_location_y(float value);
  private:
  float _internal_impact_location_y() const;
  void _internal_set_impact_location_y(float value);
  public:

  // float impact_location_z = 7;
  void clear_impact_location_z();
  float impact_location_z() const;
  void set_impact_location_z(float value);
  private:
  float _internal_impact_location_z() const;
  void _internal_set_impact_location_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.AttackInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t attack_object_id_;
    uint64_t hit_object_id_;
    int attack_type_;
    int skill_type_;
    float impact_location_x_;
    float impact_location_y_;
    float impact_location_z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PosInfo

// uint64 object_id = 1;
inline void PosInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t PosInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t PosInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.object_id)
  return _internal_object_id();
}
inline void PosInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PosInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.object_id)
}

// .Protocol.MoveState move_state = 2;
inline void PosInfo::clear_move_state() {
  _impl_.move_state_ = 0;
}
inline ::Protocol::MoveState PosInfo::_internal_move_state() const {
  return static_cast< ::Protocol::MoveState >(_impl_.move_state_);
}
inline ::Protocol::MoveState PosInfo::move_state() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.move_state)
  return _internal_move_state();
}
inline void PosInfo::_internal_set_move_state(::Protocol::MoveState value) {
  
  _impl_.move_state_ = value;
}
inline void PosInfo::set_move_state(::Protocol::MoveState value) {
  _internal_set_move_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.move_state)
}

// float x = 3;
inline void PosInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float PosInfo::_internal_x() const {
  return _impl_.x_;
}
inline float PosInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.x)
  return _internal_x();
}
inline void PosInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PosInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.x)
}

// float y = 4;
inline void PosInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float PosInfo::_internal_y() const {
  return _impl_.y_;
}
inline float PosInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.y)
  return _internal_y();
}
inline void PosInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PosInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.y)
}

// float z = 5;
inline void PosInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float PosInfo::_internal_z() const {
  return _impl_.z_;
}
inline float PosInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.z)
  return _internal_z();
}
inline void PosInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PosInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.z)
}

// float yaw = 6;
inline void PosInfo::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PosInfo::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PosInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.yaw)
  return _internal_yaw();
}
inline void PosInfo::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PosInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.yaw)
}

// float d_x = 7;
inline void PosInfo::clear_d_x() {
  _impl_.d_x_ = 0;
}
inline float PosInfo::_internal_d_x() const {
  return _impl_.d_x_;
}
inline float PosInfo::d_x() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.d_x)
  return _internal_d_x();
}
inline void PosInfo::_internal_set_d_x(float value) {
  
  _impl_.d_x_ = value;
}
inline void PosInfo::set_d_x(float value) {
  _internal_set_d_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.d_x)
}

// float d_y = 8;
inline void PosInfo::clear_d_y() {
  _impl_.d_y_ = 0;
}
inline float PosInfo::_internal_d_y() const {
  return _impl_.d_y_;
}
inline float PosInfo::d_y() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.d_y)
  return _internal_d_y();
}
inline void PosInfo::_internal_set_d_y(float value) {
  
  _impl_.d_y_ = value;
}
inline void PosInfo::set_d_y(float value) {
  _internal_set_d_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.d_y)
}

// float d_z = 9;
inline void PosInfo::clear_d_z() {
  _impl_.d_z_ = 0;
}
inline float PosInfo::_internal_d_z() const {
  return _impl_.d_z_;
}
inline float PosInfo::d_z() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.d_z)
  return _internal_d_z();
}
inline void PosInfo::_internal_set_d_z(float value) {
  
  _impl_.d_z_ = value;
}
inline void PosInfo::set_d_z(float value) {
  _internal_set_d_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.d_z)
}

// float aim_pitch = 10;
inline void PosInfo::clear_aim_pitch() {
  _impl_.aim_pitch_ = 0;
}
inline float PosInfo::_internal_aim_pitch() const {
  return _impl_.aim_pitch_;
}
inline float PosInfo::aim_pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.aim_pitch)
  return _internal_aim_pitch();
}
inline void PosInfo::_internal_set_aim_pitch(float value) {
  
  _impl_.aim_pitch_ = value;
}
inline void PosInfo::set_aim_pitch(float value) {
  _internal_set_aim_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.aim_pitch)
}

// float aim_yaw = 11;
inline void PosInfo::clear_aim_yaw() {
  _impl_.aim_yaw_ = 0;
}
inline float PosInfo::_internal_aim_yaw() const {
  return _impl_.aim_yaw_;
}
inline float PosInfo::aim_yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.aim_yaw)
  return _internal_aim_yaw();
}
inline void PosInfo::_internal_set_aim_yaw(float value) {
  
  _impl_.aim_yaw_ = value;
}
inline void PosInfo::set_aim_yaw(float value) {
  _internal_set_aim_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.aim_yaw)
}

// -------------------------------------------------------------------

// StatInfo

// uint64 object_id = 1;
inline void StatInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t StatInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t StatInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.object_id)
  return _internal_object_id();
}
inline void StatInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void StatInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.object_id)
}

// uint32 hp = 2;
inline void StatInfo::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t StatInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t StatInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.hp)
  return _internal_hp();
}
inline void StatInfo::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void StatInfo::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.hp)
}

// uint32 max_hp = 3;
inline void StatInfo::clear_max_hp() {
  _impl_.max_hp_ = 0u;
}
inline uint32_t StatInfo::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline uint32_t StatInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.max_hp)
  return _internal_max_hp();
}
inline void StatInfo::_internal_set_max_hp(uint32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void StatInfo::set_max_hp(uint32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.max_hp)
}

// uint32 damage = 4;
inline void StatInfo::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t StatInfo::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t StatInfo::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.damage)
  return _internal_damage();
}
inline void StatInfo::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void StatInfo::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.damage)
}

// -------------------------------------------------------------------

// StateInfo

// uint64 object_id = 1;
inline void StateInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t StateInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t StateInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.StateInfo.object_id)
  return _internal_object_id();
}
inline void StateInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void StateInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.StateInfo.object_id)
}

// .Protocol.LocomotionState locomotion_state = 2;
inline void StateInfo::clear_locomotion_state() {
  _impl_.locomotion_state_ = 0;
}
inline ::Protocol::LocomotionState StateInfo::_internal_locomotion_state() const {
  return static_cast< ::Protocol::LocomotionState >(_impl_.locomotion_state_);
}
inline ::Protocol::LocomotionState StateInfo::locomotion_state() const {
  // @@protoc_insertion_point(field_get:Protocol.StateInfo.locomotion_state)
  return _internal_locomotion_state();
}
inline void StateInfo::_internal_set_locomotion_state(::Protocol::LocomotionState value) {
  
  _impl_.locomotion_state_ = value;
}
inline void StateInfo::set_locomotion_state(::Protocol::LocomotionState value) {
  _internal_set_locomotion_state(value);
  // @@protoc_insertion_point(field_set:Protocol.StateInfo.locomotion_state)
}

// .Protocol.OverlayState overlay_state = 3;
inline void StateInfo::clear_overlay_state() {
  _impl_.overlay_state_ = 0;
}
inline ::Protocol::OverlayState StateInfo::_internal_overlay_state() const {
  return static_cast< ::Protocol::OverlayState >(_impl_.overlay_state_);
}
inline ::Protocol::OverlayState StateInfo::overlay_state() const {
  // @@protoc_insertion_point(field_get:Protocol.StateInfo.overlay_state)
  return _internal_overlay_state();
}
inline void StateInfo::_internal_set_overlay_state(::Protocol::OverlayState value) {
  
  _impl_.overlay_state_ = value;
}
inline void StateInfo::set_overlay_state(::Protocol::OverlayState value) {
  _internal_set_overlay_state(value);
  // @@protoc_insertion_point(field_set:Protocol.StateInfo.overlay_state)
}

// bool aim = 4;
inline void StateInfo::clear_aim() {
  _impl_.aim_ = false;
}
inline bool StateInfo::_internal_aim() const {
  return _impl_.aim_;
}
inline bool StateInfo::aim() const {
  // @@protoc_insertion_point(field_get:Protocol.StateInfo.aim)
  return _internal_aim();
}
inline void StateInfo::_internal_set_aim(bool value) {
  
  _impl_.aim_ = value;
}
inline void StateInfo::set_aim(bool value) {
  _internal_set_aim(value);
  // @@protoc_insertion_point(field_set:Protocol.StateInfo.aim)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// .Protocol.ObjectType object_type = 2;
inline void ObjectInfo::clear_object_type() {
  _impl_.object_type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_object_type() const {
  return static_cast< ::Protocol::ObjectType >(_impl_.object_type_);
}
inline ::Protocol::ObjectType ObjectInfo::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_type)
  return _internal_object_type();
}
inline void ObjectInfo::_internal_set_object_type(::Protocol::ObjectType value) {
  
  _impl_.object_type_ = value;
}
inline void ObjectInfo::set_object_type(::Protocol::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_type)
}

// .Protocol.PlayerType player_type = 3;
inline void ObjectInfo::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline ::Protocol::PlayerType ObjectInfo::_internal_player_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.player_type_);
}
inline ::Protocol::PlayerType ObjectInfo::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.player_type)
  return _internal_player_type();
}
inline void ObjectInfo::_internal_set_player_type(::Protocol::PlayerType value) {
  
  _impl_.player_type_ = value;
}
inline void ObjectInfo::set_player_type(::Protocol::PlayerType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.player_type)
}

// .Protocol.MonsterType monster_type = 4;
inline void ObjectInfo::clear_monster_type() {
  _impl_.monster_type_ = 0;
}
inline ::Protocol::MonsterType ObjectInfo::_internal_monster_type() const {
  return static_cast< ::Protocol::MonsterType >(_impl_.monster_type_);
}
inline ::Protocol::MonsterType ObjectInfo::monster_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.monster_type)
  return _internal_monster_type();
}
inline void ObjectInfo::_internal_set_monster_type(::Protocol::MonsterType value) {
  
  _impl_.monster_type_ = value;
}
inline void ObjectInfo::set_monster_type(::Protocol::MonsterType value) {
  _internal_set_monster_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.monster_type)
}

// .Protocol.PosInfo pos_Info = 5;
inline bool ObjectInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool ObjectInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void ObjectInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& ObjectInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& ObjectInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.pos_Info)
  return _internal_pos_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.pos_Info)
}
inline ::Protocol::PosInfo* ObjectInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.pos_Info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* ObjectInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.pos_Info)
  return _msg;
}
inline void ObjectInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.pos_Info)
}

// .Protocol.StatInfo stat_Info = 6;
inline bool ObjectInfo::_internal_has_stat_info() const {
  return this != internal_default_instance() && _impl_.stat_info_ != nullptr;
}
inline bool ObjectInfo::has_stat_info() const {
  return _internal_has_stat_info();
}
inline void ObjectInfo::clear_stat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_info_ != nullptr) {
    delete _impl_.stat_info_;
  }
  _impl_.stat_info_ = nullptr;
}
inline const ::Protocol::StatInfo& ObjectInfo::_internal_stat_info() const {
  const ::Protocol::StatInfo* p = _impl_.stat_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatInfo&>(
      ::Protocol::_StatInfo_default_instance_);
}
inline const ::Protocol::StatInfo& ObjectInfo::stat_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.stat_Info)
  return _internal_stat_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_stat_info(
    ::Protocol::StatInfo* stat_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_info_);
  }
  _impl_.stat_info_ = stat_info;
  if (stat_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.stat_Info)
}
inline ::Protocol::StatInfo* ObjectInfo::release_stat_info() {
  
  ::Protocol::StatInfo* temp = _impl_.stat_info_;
  _impl_.stat_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StatInfo* ObjectInfo::unsafe_arena_release_stat_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.stat_Info)
  
  ::Protocol::StatInfo* temp = _impl_.stat_info_;
  _impl_.stat_info_ = nullptr;
  return temp;
}
inline ::Protocol::StatInfo* ObjectInfo::_internal_mutable_stat_info() {
  
  if (_impl_.stat_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatInfo>(GetArenaForAllocation());
    _impl_.stat_info_ = p;
  }
  return _impl_.stat_info_;
}
inline ::Protocol::StatInfo* ObjectInfo::mutable_stat_info() {
  ::Protocol::StatInfo* _msg = _internal_mutable_stat_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.stat_Info)
  return _msg;
}
inline void ObjectInfo::set_allocated_stat_info(::Protocol::StatInfo* stat_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_info_;
  }
  if (stat_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat_info);
    if (message_arena != submessage_arena) {
      stat_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_info_ = stat_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.stat_Info)
}

// .Protocol.StateInfo state_Info = 7;
inline bool ObjectInfo::_internal_has_state_info() const {
  return this != internal_default_instance() && _impl_.state_info_ != nullptr;
}
inline bool ObjectInfo::has_state_info() const {
  return _internal_has_state_info();
}
inline void ObjectInfo::clear_state_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_info_ != nullptr) {
    delete _impl_.state_info_;
  }
  _impl_.state_info_ = nullptr;
}
inline const ::Protocol::StateInfo& ObjectInfo::_internal_state_info() const {
  const ::Protocol::StateInfo* p = _impl_.state_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StateInfo&>(
      ::Protocol::_StateInfo_default_instance_);
}
inline const ::Protocol::StateInfo& ObjectInfo::state_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.state_Info)
  return _internal_state_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_state_info(
    ::Protocol::StateInfo* state_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_info_);
  }
  _impl_.state_info_ = state_info;
  if (state_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.state_Info)
}
inline ::Protocol::StateInfo* ObjectInfo::release_state_info() {
  
  ::Protocol::StateInfo* temp = _impl_.state_info_;
  _impl_.state_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StateInfo* ObjectInfo::unsafe_arena_release_state_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.state_Info)
  
  ::Protocol::StateInfo* temp = _impl_.state_info_;
  _impl_.state_info_ = nullptr;
  return temp;
}
inline ::Protocol::StateInfo* ObjectInfo::_internal_mutable_state_info() {
  
  if (_impl_.state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StateInfo>(GetArenaForAllocation());
    _impl_.state_info_ = p;
  }
  return _impl_.state_info_;
}
inline ::Protocol::StateInfo* ObjectInfo::mutable_state_info() {
  ::Protocol::StateInfo* _msg = _internal_mutable_state_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.state_Info)
  return _msg;
}
inline void ObjectInfo::set_allocated_state_info(::Protocol::StateInfo* state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_info_;
  }
  if (state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state_info);
    if (message_arena != submessage_arena) {
      state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_info_ = state_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.state_Info)
}

// -------------------------------------------------------------------

// AttackInfo

// uint64 attack_object_id = 1;
inline void AttackInfo::clear_attack_object_id() {
  _impl_.attack_object_id_ = uint64_t{0u};
}
inline uint64_t AttackInfo::_internal_attack_object_id() const {
  return _impl_.attack_object_id_;
}
inline uint64_t AttackInfo::attack_object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.attack_object_id)
  return _internal_attack_object_id();
}
inline void AttackInfo::_internal_set_attack_object_id(uint64_t value) {
  
  _impl_.attack_object_id_ = value;
}
inline void AttackInfo::set_attack_object_id(uint64_t value) {
  _internal_set_attack_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.attack_object_id)
}

// uint64 hit_object_id = 2;
inline void AttackInfo::clear_hit_object_id() {
  _impl_.hit_object_id_ = uint64_t{0u};
}
inline uint64_t AttackInfo::_internal_hit_object_id() const {
  return _impl_.hit_object_id_;
}
inline uint64_t AttackInfo::hit_object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.hit_object_id)
  return _internal_hit_object_id();
}
inline void AttackInfo::_internal_set_hit_object_id(uint64_t value) {
  
  _impl_.hit_object_id_ = value;
}
inline void AttackInfo::set_hit_object_id(uint64_t value) {
  _internal_set_hit_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.hit_object_id)
}

// .Protocol.AttackType attack_type = 3;
inline void AttackInfo::clear_attack_type() {
  _impl_.attack_type_ = 0;
}
inline ::Protocol::AttackType AttackInfo::_internal_attack_type() const {
  return static_cast< ::Protocol::AttackType >(_impl_.attack_type_);
}
inline ::Protocol::AttackType AttackInfo::attack_type() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.attack_type)
  return _internal_attack_type();
}
inline void AttackInfo::_internal_set_attack_type(::Protocol::AttackType value) {
  
  _impl_.attack_type_ = value;
}
inline void AttackInfo::set_attack_type(::Protocol::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.attack_type)
}

// .Protocol.SkillType skill_type = 4;
inline void AttackInfo::clear_skill_type() {
  _impl_.skill_type_ = 0;
}
inline ::Protocol::SkillType AttackInfo::_internal_skill_type() const {
  return static_cast< ::Protocol::SkillType >(_impl_.skill_type_);
}
inline ::Protocol::SkillType AttackInfo::skill_type() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.skill_type)
  return _internal_skill_type();
}
inline void AttackInfo::_internal_set_skill_type(::Protocol::SkillType value) {
  
  _impl_.skill_type_ = value;
}
inline void AttackInfo::set_skill_type(::Protocol::SkillType value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.skill_type)
}

// float impact_location_x = 5;
inline void AttackInfo::clear_impact_location_x() {
  _impl_.impact_location_x_ = 0;
}
inline float AttackInfo::_internal_impact_location_x() const {
  return _impl_.impact_location_x_;
}
inline float AttackInfo::impact_location_x() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.impact_location_x)
  return _internal_impact_location_x();
}
inline void AttackInfo::_internal_set_impact_location_x(float value) {
  
  _impl_.impact_location_x_ = value;
}
inline void AttackInfo::set_impact_location_x(float value) {
  _internal_set_impact_location_x(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.impact_location_x)
}

// float impact_location_y = 6;
inline void AttackInfo::clear_impact_location_y() {
  _impl_.impact_location_y_ = 0;
}
inline float AttackInfo::_internal_impact_location_y() const {
  return _impl_.impact_location_y_;
}
inline float AttackInfo::impact_location_y() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.impact_location_y)
  return _internal_impact_location_y();
}
inline void AttackInfo::_internal_set_impact_location_y(float value) {
  
  _impl_.impact_location_y_ = value;
}
inline void AttackInfo::set_impact_location_y(float value) {
  _internal_set_impact_location_y(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.impact_location_y)
}

// float impact_location_z = 7;
inline void AttackInfo::clear_impact_location_z() {
  _impl_.impact_location_z_ = 0;
}
inline float AttackInfo::_internal_impact_location_z() const {
  return _impl_.impact_location_z_;
}
inline float AttackInfo::impact_location_z() const {
  // @@protoc_insertion_point(field_get:Protocol.AttackInfo.impact_location_z)
  return _internal_impact_location_z();
}
inline void AttackInfo::_internal_set_impact_location_z(float value) {
  
  _impl_.impact_location_z_ = value;
}
inline void AttackInfo::set_impact_location_z(float value) {
  _internal_set_impact_location_z(value);
  // @@protoc_insertion_point(field_set:Protocol.AttackInfo.impact_location_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
